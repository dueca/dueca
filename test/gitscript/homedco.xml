<?xml version='1.0' encoding='UTF-8'?>
<!--
    Re-write the dco lines for dco objects that are from the same project as
    the module in which it is used; omit the module part.
-->
<policies xmlns="https://dueca.tudelft.nl"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="https://dueca.tudelft.nl https://dueca.tudelft.nl/schemas/policies.xsd">
  <policy name="home-dco" id="24-001">
    <description>
      From dueca 4.0.9, comm-objects.lst files interpretation is more flexible
      A line with only the name of a dco object (with .dco extension, and
      optionally a comment), will be interpreted to include a dco object from
      the "home" project, i.e., the project that also supplies the module.

      This policy will search for dco lines where the project matches the
      home project, and produce a match list, which can then be used to
      re-write the comm-objects.lst file, removing the project part from the
      dco specification.

      The advantage is that a project may be copied/cloned, and that the used
      dco's will no longer be pulled from the original project.
    </description>
    <condition type="home-dco">
      <!-- any dco -->
      <param name="dco" regex="true">
        ^[a-zA-Z0-9_]+$
      </param>
      <param name="resultvar">
        homedco
      </param>
    </condition>
    <action type="change-dco">
      <param name="inputvar">
        homedco
      </param>
      <!-- new-dco is a match, result is the current dco name -->
      <param name="new_dco" format="true">
        {dco}
      </param>
      <!-- new_project is not set, will be "None", and not written -->
      <!-- mode replace -->
      <param name="mode">
        replace
      </param>
    </action>
  </policy>
  <policy name="home-depend" id="24-002">
    <description>
      From dueca 4.0.9, CMakeLists.txt files interpretation is more flexible
      A USEMODULES line with only the name of a module will be interpreted
      to include a module from the "home" project, i.e., the project that
      also supplies the module.

      The advantage is that a project may be copied/cloned, and that the used
      modules no longer be pulled from the original project.
    </description>
    <condition type="home-depend">
      <param name="resultvar">
        homedepend
      </param>
    </condition>
    <action type="insert-text">
      <param name="inputvar">homedepend</param>
      <param name="mode">replace</param>
      <param name="text" format="true">{g2} # policy 24-002 {g3}</param>
    </action>
  </policy>
</policies>
