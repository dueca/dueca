# ============================================================================
#       item            : template Makefile dueca executable
#       made by         : RenÃ© van Paassen
#       date            : 010320
# ============================================================================
# please use gmake or gnumake

# home of dueca objects, library, include
CODEGEN =        /usr/local/bin/dueca-codegen
DUECALIB =         -L/usr/local/lib
DUECAINC =         -I/usr/local/include/dueca

# loader definitions
LD=                g++
LDFLAGS =        -L/usr/X11R6/lib $(DUECALIB)

# NOTE: you might need adjustment to this libs line. It currently uses the
# Matlab 5.3 line of rtw libraries, both glut and gtk
LIBS=                 -ldusime -ldueca -ldusime -ldueca -ldueca-rtw -ldueca-rtws \
                -ldueca-extra -lglut -lgtkgl -lGLU -lGL \
                -lpthread -lguile -lgtk -lgdk -lglib -lX11 -lXext -lm

# =========================================================================
#
# EDIT THIS SECTION TO INSERT YOUR SOURCE FILES
#
# =========================================================================

# enter all sub-directories with modules/code
SUBDIRS =         comm-objects

# enter all sub-directories with dueca.cnf/dueca.mod files. The additional
# files generated by dueca can be cleaned up after use
RUNDIRS =        solo

# =========================================================================
#
# END OF THE USER-ADJUSTABLE SECTION
#
# =========================================================================

MODULES =         $(SUBDIRS:=/module.o)
MODULEFRESH =         $(SUBDIRS:=/module_fresh)

TO_DELETE =        "*~" "dum*.m" "dum*.dat" dueca.channels dueca.scratch \
                dueca.modules dueca.activities dueca.objects core \
                error.log normal.log

# =========================================================================
#
#        targets and rules
#
# =========================================================================

all : dueca_run.x

dueca_run.x : $(MODULEFRESH)
        $(LD) $(LDFLAGS) $(MODULES) $(DUECAOBJS) $(LIBS) -o $@

$(MODULEFRESH) : %/module_fresh :
        (cd $(dir $@) && $(MAKE) DUECAINC="$(DUECAINC)" CODEGEN=$(CODEGEN))

depend:
        (for i in $(SUBDIRS); do \
         (cd $$i && $(MAKE) DUECAINC="$(DUECAINC)" depend); \
         done)

realtime: dueca_run.x
        strip dueca_run.x
        sudo chown root dueca_run.x
        sudo chmod 4770 dueca_run.x

# ======================================================================
#
#        transport and checking sync
#
# ======================================================================

DIR := $(shell pwd)
DIRNAME = $(notdir $(DIR))
PACKNAME = $(DIRNAME).tgz

HAVEZIP := $(shell if mdir x:ds-apps 2>/dev/null 1>/dev/null; then \
             echo 1; else echo 0; fi)
MPRINT  := $(shell if test $(HAVEZIP) = "1"; then \
                mdir x:/ds-apps/$(PACKNAME) | head -n 5 | tail -n 1 ; \
             else \
                ls -l /tmp/$(PACKNAME); \
             fi)

testp:
        @echo "$(HAVEZIP) $(MPRINT)"

pack: mrproper is-synced
        (cd ..; tar cvfz /tmp/$(PACKNAME) $(DIRNAME) )
        @(if test "$(HAVEZIP)" = "1"; then \
            mcopy /tmp/$(PACKNAME) x:ds-apps ; \
            rm -f /tmp/$(PACKNAME) ; \
         else \
            echo "No zip, left $(PACKNAME) in /tmp"; \
         fi)
        @make force-sync

unpack: mrproper no-newer
        @(if test "$(HAVEZIP)" = "1"; then \
              rm -f /tmp/$(PACKNAME); \
              mcopy -m x:ds-apps/$(PACKNAME) /tmp; \
          fi ; \
          if [ /tmp/$(PACKNAME) -nt .last_sync ]; then \
              echo "--> unpacking $(PACKNAME)"; \
              cd ..; tar zxvf /tmp/$(PACKNAME) ; \
              echo "$(MPRINT)" > $(DIRNAME)/.last_sync; \
          else \
              echo "--> data in directory is not older than disk data"; \
          fi)

sync: is-synced no-newer
        @echo "--> data appears in sync:"

is-synced:
        @(if test "$(MPRINT)" != "`cat .last_sync`" ; then \
              echo "--> data out of sync:"; \
              echo "--> data on drive: \"$(MPRINT)\"" ;\
              echo "--> data in dir  : \"`cat .last_sync`\"" ;\
              exit 1; \
          else \
              exit 0;        \
          fi )

no-newer:
        @(if [ ! -z "`find -type f -name "*" -a -newer .last_sync`" ] ; then \
          echo "--> the following files have been modified since last sync:";\
                    find -type f -name "*" -a -newer .last_sync; \
                 exit 1; \
         else \
                   exit 0;        \
         fi)

force-sync:
        @(echo "$(MPRINT)" > .last_sync)

# =========================================================================
#
#        clean up again
#
# =========================================================================

clean:
        rm -f *.o *~ core *.res
        (for i in $(SUBDIRS); do (cd $$i && $(MAKE) clean) ; done)

mrproper:
        rm -f *.o *.x *~ core *.a *.res
        rm -f s-wrap
        (for i in $(TO_DELETE); do \
                 find . -name "$$i" -exec rm -f {} \;; done)
        (for i in $(SUBDIRS); do (cd $$i && $(MAKE) mrproper) ; done)
